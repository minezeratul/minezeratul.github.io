<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Minezeratul</title>
    <link>https://minezeratul.github.io/categories/java/</link>
    <description>Recent content in Java on Minezeratul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Jul 2021 20:44:50 +0800</lastBuildDate><atom:link href="https://minezeratul.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>并查集Union-Find应用</title>
      <link>https://minezeratul.github.io/p/solve130/</link>
      <pubDate>Wed, 21 Jul 2021 20:44:50 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/solve130/</guid>
      <description>Leetcode 130 很多使用 DFS 深度优先算法解决的问题，也可以用 Union-Find 算法解决 Leetcode130，题目要求找出被X包围的O ，其中不包括边界上的O 第一种方法，用dfs 做法和官解一样
public void dfs(char[][] board){ int n = board.length; if (n == 0){ return; } //n为行数,m为列数  int m = board[0].length; //找出左右边界上的O，改为A  for (int i = 0; i &amp;lt; n; i++) { dfs(board , i , 0); dfs(board , i , m - 1); } //找出上下边界的O改为A  for (int i = 1; i &amp;lt; m - 1; i++) { dfs(board , 0 , i); dfs(board , n - 1 , i); } //遍历  for (int i = 0; i &amp;lt; n; i++) { for (int j = 0; j &amp;lt; m; j++) { if (board[i][j] == &amp;#39;A&amp;#39;){ board[i][j] = &amp;#39;O&amp;#39;; }else if (board[i][j] == &amp;#39;O&amp;#39;){ board[i][j] = &amp;#39;X&amp;#39;; }else { continue; } } } } //若找到边界上的O，开始上下左右搜索  //将邻接的O也变成A  public c void dfs(char[][] board , int x , int y){ //越界处理，以及寻O  if (x &amp;lt; 0 || y &amp;lt; 0 || x &amp;gt;= board.</description>
    </item>
    
    <item>
      <title>Union-Find</title>
      <link>https://minezeratul.github.io/p/unionfind/</link>
      <pubDate>Wed, 21 Jul 2021 19:31:34 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/unionfind/</guid>
      <description>Union-Find 并查集 Union-Find 并查集算法的关键在于union和connected的效率 ， 若只是简单的连接节点 **find , union , connected **三个函数的时间复杂度会是O(n) ，而通过平衡树，可使复杂度降低到O(logn) 再而通过路径压缩，可使得union和connected的时间复杂度达到O(1) 这是优化版的Union-Find , 防止了树退化成链表而降低了效率 public class UnionFind { private int count;//连通分量个数  private int[] parent;//存储一棵树 , 记录每个节点的父节点，相当于指向父节点的指针  private int[] size;//记录每棵树重量  public UnionFind() { } public UnionFind(int n) { this.count = n; parent = new int[n]; size = new int[n]; for (int i = 0; i &amp;lt; n; i++) { parent[i] = i;//节点指向自己  size[i] = 1; } } public void union(int p, int q) { int rootP = find(p); int rootQ = find(q); if (rootP == rootQ) { return; } //get the balanced tree  // 将两棵树合并为一棵树，小树接到大树下面，较平衡  // 使其不会退化成链表而降低效率  if (size[rootP] &amp;gt; size[rootQ]) { parent[rootQ] = rootP; size[rootP] += size[rootQ]; } else { parent[rootP] = rootQ; size[rootQ] += size[rootP]; } count--; } private int find(int x) { //路径压缩  while (parent[x] !</description>
    </item>
    
    <item>
      <title>Graph Algorithms Part II</title>
      <link>https://minezeratul.github.io/p/graph2/</link>
      <pubDate>Tue, 20 Jul 2021 09:24:47 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/graph2/</guid>
      <description>Graph Algorithms Part II. PrimMST 即时版本 用PriorityQueue存储vertex 详情可见algs4 4.3.5 不需要保存所有非树顶点w到树顶点的边，而只需要保存其中权重最小的那条，将v添加后检查是否需要更新这条权重最小的边
public MST getMinimumSpanningTree(int startingVertex) { List&amp;lt;Integer&amp;gt; T = new ArrayList&amp;lt;Integer&amp;gt;(); // T initially contains the startingVertex;  T.add(startingVertex); // Number of vertices  int numberOfVertices = vertices.size(); // Parent of a vertex  int[] parent = new int[numberOfVertices]; // Initially set the parent of all vertices to -1  Arrays.fill(parent, -1); // Total weight of the tree thus far  double totalWeight = 0; // Clone the priority queue, so to keep the original queue intact  List&amp;lt;PriorityQueue&amp;lt;WeightedEdge&amp;gt;&amp;gt; queues = deepClone(this.</description>
    </item>
    
    <item>
      <title>String Freq Sort</title>
      <link>https://minezeratul.github.io/p/leetcode-451/</link>
      <pubDate>Tue, 06 Jul 2021 15:33:26 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/leetcode-451/</guid>
      <description>Leetcode 451 451. 根据字符出现频率排序 利用hashmap记录 ， 或者用数组模拟hashmap , 然后利用PriorityQueue大顶堆来排序
public String frequencySort(String s) { StringBuilder sb = new StringBuilder(); //Map&amp;lt;Character , Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();  //for (char ch : s.toCharArray()){  // map.put(ch , map.getOrDefault(ch , 0 ) + 1);  //}  //也可以开一个128的数组替换 , 优化性能  int[] frequency = new int[128]; for (char ch : s.toCharArray()){ frequency[ch]++; } PriorityQueue&amp;lt;node&amp;gt; pq = new PriorityQueue&amp;lt;node&amp;gt;((o1 , o2) -&amp;gt; o1.freq !</description>
    </item>
    
    <item>
      <title>FindErrorNum</title>
      <link>https://minezeratul.github.io/p/leetcode-645/</link>
      <pubDate>Tue, 06 Jul 2021 10:08:44 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/leetcode-645/</guid>
      <description>Leetcode 645 FindErrorNum 645. 错误的集合 第一种方法，用数组模拟哈希表，获取出现次数
public int[] findErrorNums(int[] nums) { int n = nums.length; int[] res = new int[2];//导致集合丢失了一个数字 并且有一个数字重复。  int[] tmp = new int[n + 1]; for (int num : nums){ //统计次数  tmp[num]++; } for (int i = 1; i &amp;lt; tmp.length; i++) { if (tmp[i] == 1){ //有效  continue; } if (tmp[i] == 2){ //duplicated  res[0] = i; }else { //lost  res[1] = i; } } return res; } 第二种方法 ， 数学</description>
    </item>
    
    <item>
      <title>Passing message</title>
      <link>https://minezeratul.github.io/p/leetcode-lcp07/</link>
      <pubDate>Mon, 05 Jul 2021 16:15:12 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/leetcode-lcp07/</guid>
      <description>Leetcode LCP-07 LCP 07. 传递信息 看用例就可以知道这是一个图，[u , v]
用dfs深度优先来一步一步搜寻到末端
public int numWays(int n, int[][] relations, int k) { int cnt = 0; boolean[][] isVisited = new boolean[n][n];//判断是否经过  for (int[] relation : relations) { isVisited[relation[0]][relation[1]] = true; } return dfs(0 , isVisited , k); } public int dfs(int n , boolean[][] isVisited , int k){ if (k == 0){ return isVisited.length - 1 == n ? 1 : 0; } int cnt = 0 ; for (int i = 0; i &amp;lt; isVisited[n].</description>
    </item>
    
    <item>
      <title>Ice-Cream</title>
      <link>https://minezeratul.github.io/p/leetcode-1833/</link>
      <pubDate>Mon, 05 Jul 2021 15:51:33 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/leetcode-1833/</guid>
      <description>Leetcode 1833 1833. 雪糕的最大数量 夏天到了，终于放暑假了！LeetCode也叫人吃雪糕了
由题意可知，要买最多雪糕，可以想出贪心
第一种做法
public int maxIceCream(int[] costs, int coins) { int cnt = 0; Arrays.sort(costs);//sorted,从最便宜的开始买  for(int cost : costs){ if(coins &amp;gt;= cost){//超过即退出  coins -= cost; cnt++; }else{ break; } } return cnt; } 第二种排序，用计数排序来实现
public int maxIceCream2(int[] costs, int coins) { int[] freq = new int[100001]; for (int cost:costs){ //用数组模拟哈希表记录出现次数  freq[cost]++; } int cnt = 0; for (int i = 1; i &amp;lt;= 100000; i++) { if (coins &amp;gt;= i) {//超过即退出  int curCount = Math.</description>
    </item>
    
    <item>
      <title>Graph Algorithms Part I.2</title>
      <link>https://minezeratul.github.io/p/graph1.2/</link>
      <pubDate>Fri, 02 Jul 2021 23:58:08 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/graph1.2/</guid>
      <description>Graph Algorithms Part I.2 小优化 用数组isTnT 代替contains()去查找一个顶点u是否在T里 MST public MST getMinimumSpanningTree(int startingVertex) { // cost[v] stores the cost by adding v to the tree  double[] cost = new double[getSize()]; // Initial cost  Arrays.fill(cost, Double.POSITIVE_INFINITY); cost[startingVertex] = 0; // Cost of source is 0  int[] parent = new int[getSize()]; // Parent of a vertex  parent[startingVertex] = -1; // startingVertex is the root  double totalWeight = 0; // Total weight of the tree thus far  List&amp;lt;Integer&amp;gt; T = new ArrayList&amp;lt;&amp;gt;(); boolean[] isTnT = new boolean[getSize()]; // Expand T  while (T.</description>
    </item>
    
    <item>
      <title>try-with-resources优先于try-finally</title>
      <link>https://minezeratul.github.io/p/note/</link>
      <pubDate>Tue, 08 Jun 2021 17:25:08 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/note/</guid>
      <description>Reading Day  try-with-resources是jdk1.7引入的语法，使得关闭资源操作无需层层嵌套在finally
 当try-finally关闭资源时，其出现了两处异常，往往只会返回第一处异常。
当java7开始引入try-with-resources后，这些问题就迎刃而解了。不过使用这个结构的时候，必须接入AutoCloseable接口
其中包括了单个返回void的close方法。现在Java库与第三方类库中的许多类和接口都实现了或拓展了AutoCloseable接口
Try-Catch-Finally 结构 可见，我们需要手动关闭两个Stream资源。而且为了防止异常的产生而无法关闭，需要借助finally正常关闭资源
public class DemoTest { public static void main(String[] args) { BufferedInputStream bin = null; BufferedOutputStream bout = null; try { bin = new BufferedInputStream(new FileInputStream(new File(&amp;#34;test.txt&amp;#34;))); bout = new BufferedOutputStream(new FileOutputStream(new File(&amp;#34;out.txt&amp;#34;))); int b; while ((b = bin.read()) != -1) { bout.write(b); } } catch (IOException e) { e.printStackTrace(); } finally { if (bin != null) { try { bin.</description>
    </item>
    
    <item>
      <title>Graph Algorithms Part I</title>
      <link>https://minezeratul.github.io/p/graph/</link>
      <pubDate>Wed, 02 Jun 2021 23:58:08 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/graph/</guid>
      <description>Graph Algorithms Part I. MST 最小生成树 public class MST extends Tree { private double totalWeight; // Total weight of all edges in the tree  public MST(int root, int[] parent, List&amp;lt;Integer&amp;gt; searchOrder, double totalWeight) { super(root, parent, searchOrder); this.totalWeight = totalWeight; } public double getTotalWeight() { return totalWeight; } } ShortestPathTree类 public class ShortestPathTree extends Tree{ private double[] cost; public ShortestPathTree(int source , int[] parent , List&amp;lt;Integer&amp;gt; searchOrder , double[] cost){ super(source , parent , searchOrder); this.</description>
    </item>
    
    <item>
      <title>CheckSubArray</title>
      <link>https://minezeratul.github.io/p/leetcode-523/</link>
      <pubDate>Wed, 02 Jun 2021 09:46:48 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/leetcode-523/</guid>
      <description>Leetcode 523 523. 连续的子数组和 给你一个整数数组 nums 和一个整数 k ，编写一个函数来判断该数组是否含有同时满足下述条件的连续子数组：
子数组大小 至少为2 ，且子数组元素总和为 k 的倍数。 如果存在，返回 true ；否则，返回 false 。
如果存在一个整数 n ，令整数 x 符合 x = n * k ，则称 x 是 k 的一个倍数。
public boolean checkSubarraySum(int[] nums, int k) { int n = nums.length; if (n &amp;lt; 2) {//大小至少为2  return false; } //利用了同余定理  //即 ( pre(j) - pre (i) ) % k == 0 则 pre(j) % k == pre(i) % k  //推导 =&amp;gt; pre (i) % k = (a0 + a1 + .</description>
    </item>
    
    <item>
      <title>Week-243 chubao</title>
      <link>https://minezeratul.github.io/p/lcweek243/</link>
      <pubDate>Sun, 30 May 2021 16:09:40 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/lcweek243/</guid>
      <description>触宝周赛Week 243 不会做最后一题哈哈哈
第一题5772. 检查某单词是否等于两单词之和
public boolean isSumEqual(String firstWord, String secondWord, String targetWord) { int ans = decode(firstWord) + decode(secondWord); return ans == decode(targetWord); } private int decode(String str) { int n = str.length(); int cnt = 0; //从个位开始计算  for (int i = n - 1, j = 1; i &amp;gt;= 0; i--, j = j * 10) { cnt += ((str.charAt(i) - &amp;#39;a&amp;#39;) * j); } return cnt; } 第二题 5773.</description>
    </item>
    
    <item>
      <title>Hamming algs</title>
      <link>https://minezeratul.github.io/p/hamming/</link>
      <pubDate>Sat, 29 May 2021 08:58:15 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/hamming/</guid>
      <description>Leetcode 477 这是5.28的每日一题477. 汉明距离总和
两个整数的 汉明距离 指的是这两个数字的二进制数对应位不同的数量。
给你一个整数数组 nums，请你计算并返回 nums 中任意两个数之间汉明距离的总和。
Input:[4,14,2] Output:6
题目要求数组的长度不超过 10^4。说明不能用 O^2 的时间复杂度的解法 , 所以461. 汉明距离的解法会超时
public int totalHammingDistance(int[] nums) { int ans = 0, n = nums.length; //10^9 &amp;lt; 2^30 ， 枚举到29位  for (int i = 0; i &amp;lt; 30; ++i) { int c = 0; for (int val : nums) { //来取出其第 i 位的值 , 得出不同位  c += (val &amp;gt;&amp;gt; i) &amp;amp; 1; } ans += c * (n - c); } return ans; } 461.</description>
    </item>
    
    <item>
      <title>In Reverse , we finally meet in the sunset</title>
      <link>https://minezeratul.github.io/p/stacktoreverse/</link>
      <pubDate>Wed, 26 May 2021 21:02:46 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/stacktoreverse/</guid>
      <description>Leetcode 1190 5.26的每日一题，需从内到外翻转字符串 ，我们可以遇到)就开始翻转内容
可以用stack来存储每个(的index，找到第一个)的时候即为优先级最高的里面，开始第一次翻转char[]数组
Sample input:&amp;quot;(abcd)&amp;quot; output:&amp;quot;dcba&amp;quot;
public String reverseParentheses(String s) { StringBuilder sb = new StringBuilder();//用stringbuilder构建字符串  char[] chs = s.toCharArray(); int n = s.length(); Stack&amp;lt;Integer&amp;gt; stack = new Stack&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; n; i++) { if (chs[i] == &amp;#39;(&amp;#39;) {//记录index  stack.push(i); } if (chs[i] == &amp;#39;)&amp;#39;) {//匹配，开始  reverse(chs, stack.pop() + 1, i); } } for (int i = 0; i &amp;lt; n; i++) { if (chs[i] !</description>
    </item>
    
    <item>
      <title>Collections of quickSort</title>
      <link>https://minezeratul.github.io/p/quicksort/</link>
      <pubDate>Sat, 22 May 2021 21:08:13 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/quicksort/</guid>
      <description>如何理解quickSort? 最近在复习快排，便重新整理了一下，除了classic quickSort 还有变种quickSelectionSort(随机快排)，如215、1738，还有Dual-Pivot Partition、Three-Way Partition。 不同的partition复用，使其在面对不同情况下有不同的效果
最常见的快排，最坏的情况是 1.已经/几乎有序 → 退化成冒泡排序
2.pivot刚好是最大值/最小值
Hoare quickSort, 这个版本的算法在含有许多重复元素的情况下，可以避免其出现最坏情况的划分
public int partition(int[] a , int lo , int hi){ int p = a[lo]; int i = lo - 1 , j = hi + 1; while(true){ while(a[--j] &amp;gt; p); while(a[++i] &amp;lt; p); if(i &amp;lt; j) swap(a , i , j); else return j ; } } 这是改进后的，也是我们现在最常用的版本
public void quickSort(int[] arr){ quickSort(arr , 0 , arr.</description>
    </item>
    
    <item>
      <title>K-Largest XOR Value</title>
      <link>https://minezeratul.github.io/p/13rd-blog/</link>
      <pubDate>Sat, 22 May 2021 19:47:51 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/13rd-blog/</guid>
      <description>Leetcode 1738 这是Leetcode 5.19的题目 1738. 找出第 K 大的异或坐标值 ，是215. 数组中的第K个最大元素 的二维异或版本 215回顾
第一种方法，用前缀异或 + PriorityQueue , Java是用最小堆实现pq
public int kthLargestValue(int[][] matrix, int k) { int m = mat.length , n = mat[0].length; int[][] pre = new int[m + 1][n + 1]; PriorityQueue&amp;lt;Integer&amp;gt; pq = new PriorityQueue&amp;lt;&amp;gt;(); for (int i = 1; i &amp;lt;= m ; i++) { for (int j = 1; j &amp;lt;= n ; j++) { //二维数组的前缀异或  pre[i][j] = pre[i - 1][j] ^ pre[i][j - 1] ^ pre[i - 1][j - 1] ^ mat[i - 1][j - 1]; if (pq.</description>
    </item>
    
    <item>
      <title>Largest Val in my mind xD</title>
      <link>https://minezeratul.github.io/p/12nd-blog/</link>
      <pubDate>Sat, 22 May 2021 19:27:24 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/12nd-blog/</guid>
      <description>Leetcode K-Largest Val 215. 数组中的第K个最大元素 , 题目需要 在未排序的数组找到第 k 个最大的元素 ，而且不是第k个不同的元素
先看简单方法，用Java的PriorityQueue来解答，需注意的是PriorityQueue是用小顶堆实现的
public int findKthLargest2(int[] nums, int k) { PriorityQueue&amp;lt;Integer&amp;gt; pq = new PriorityQueue&amp;lt;&amp;gt;(); //小顶堆去除元素  for (int num : nums) { pq.offer(num); if (pq.size() &amp;gt; k) { //因为我们只需要找到第K大的数,超过size直接去除堆顶元素就好  pq.poll(); } } return pq.peek(); } 亦或者和官方解答一样，用大顶堆实现也可以得出第K大的数
public int findKthLargest(int[] nums, int k) { int heapSize = nums.length; buildMaxHeap(nums, heapSize); for (int i = nums.length - 1; i &amp;gt;= nums.length - k + 1; --i) { swap(nums, 0, i); --heapSize; maxHeapify(nums, 0, heapSize); } return nums[0]; } public void buildMaxHeap(int[] a, int heapSize) { for (int i = heapSize / 2; i &amp;gt;= 0; i--) { maxHeapify(a, i, heapSize); } } public void maxHeapify(int[] a, int i, int heapSize) { int l = i * 2 + 1, r = i * 2 + 2, largest = i; if (l &amp;lt; heapSize &amp;amp;&amp;amp; a[l] &amp;gt; a[largest]) { largest = l; } if (r &amp;lt; heapSize &amp;amp;&amp;amp; a[r] &amp;gt; a[largest]) { largest = r; } if (largest !</description>
    </item>
    
    <item>
      <title>You hava my word now</title>
      <link>https://minezeratul.github.io/p/kth-word/</link>
      <pubDate>Wed, 19 May 2021 10:32:16 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/kth-word/</guid>
      <description>Find the Kth-frequency word 这是5.19 的 692. 前K个高频单词
用哈希表 + 排序， HashMap记录次数 , 然后从大到小排列 public static List&amp;lt;String&amp;gt; topKFrequent(String[] words, int k) { Map&amp;lt;String, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); List&amp;lt;String&amp;gt; ans = new ArrayList&amp;lt;&amp;gt;(); for (String word : words) { map.put(word, map.getOrDefault(word, 0) + 1); } for (Map.Entry&amp;lt;String, Integer&amp;gt; entry : map.entrySet()) { ans.add(entry.getKey()); } Collections.sort(ans, new Comparator&amp;lt;String&amp;gt;() { //compare&amp;gt;0则大在前 &amp;lt;0则大在后  //compareTo 比较两个str  @Override public int compare(String o1, String o2) { return map.</description>
    </item>
    
    <item>
      <title>又又又是XOR</title>
      <link>https://minezeratul.github.io/p/eleventh-blog/</link>
      <pubDate>Tue, 18 May 2021 19:32:07 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/eleventh-blog/</guid>
      <description>Leetcode 1442 5.18的每日一题1442. 形成两个异或相等数组的三元组数目
a = arr[i] ^ arr[i + 1] ^ &amp;hellip; ^ arr[j - 1] b = arr[j] ^ arr[j + 1] ^ &amp;hellip; ^ arr[k
利用了x^y = 0 ，可知两个数必相等。计算每个数的异或 ， 若出现0 ， 则说明该区间有能够令 a == b 成立的三元组 (i, j , k) 的数目
其实 i ^ k = 0 , i &amp;lt; j &amp;lt;= k , j在区间范围内，异或结果都等于0
Talk is cheap , show u the code XDDDD
public int countTriplets(int[] arr) { int n = arr.</description>
    </item>
    
    <item>
      <title>Are u my cousin?</title>
      <link>https://minezeratul.github.io/p/tenth-blog/</link>
      <pubDate>Mon, 17 May 2021 10:43:19 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/tenth-blog/</guid>
      <description>Leetcode 993 5.17的每日一题993. 二叉树的堂兄弟节点
同深度 ， 不同父节点 就可判断
直接dfs查找，若不存在，返回null
不在第n层就继续往下走
public class isCousins993 { TreeNode parX; TreeNode parY; int deepX; int deepY; public boolean isCousins(TreeNode root, int x, int y) { dfs(root, null, 0, x, y); return parX != parY &amp;amp;&amp;amp; deepX == deepY; } private void dfs(TreeNode root, TreeNode par, int deep, int x, int y) { if (root == null) return; if (root.val == x) { deepX = deep; parX = par; } else if (root.</description>
    </item>
    
    <item>
      <title>Trie &amp; XOR</title>
      <link>https://minezeratul.github.io/p/ninth-blog/</link>
      <pubDate>Sun, 16 May 2021 23:21:51 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/ninth-blog/</guid>
      <description>Leetcode 421 FineMaxXOR 5.16的题目 421. 数组中两个数的最大异或值
用到了 208. 实现 Trie (前缀树) algs4的chapter5.2
public class Trie { private Trie[] children; private boolean isEnd; public Trie() { children = new Trie[26];//字母表映射  isEnd = false; } //插入字符串 	//我们从字典树的根开始,插入字符串。对于当前字符对应的子节点,有两种情况 	//子节点存在。沿着指针移动到子节点,继续处理下一个字符。 	//子节点不存在。创建一个新的子节点,记录在children数组的对应位置上,  //然后沿着指针移动到子节点,继续搜索下一个字符。  public void insert(String word) { Trie node = this;//root  for (int i = 0; i &amp;lt; word.length(); i++) { char ch = word.charAt(i); int index = ch - &amp;#39;a&amp;#39;; if (node.</description>
    </item>
    
    <item>
      <title>Rob me if u can</title>
      <link>https://minezeratul.github.io/p/eighth-blog/</link>
      <pubDate>Sun, 16 May 2021 00:47:24 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/eighth-blog/</guid>
      <description>Leetcode 740 5.5的题目740. 删除并获得点数 和 198. 打家劫舍 有点类似 , 需要在一些地方做出调整
为了做740，先去当了一遍小偷XDDD
打家劫舍，经典dp问题，偷还得隔间偷,甚至开了透视知道哪里最多钱（笑
一间的时候肯定只能偷那个，两间的时候就需要Math.max比较
n间的时候则需要 when i &amp;gt; 2 , Math.max(dp[i - 2] + num[i] , dp[i - 1])来比较金额大小
public int rob(int[] nums) { int n = nums.length; if (n == 0 || nums == null) return 0; else if (n == 1) return nums[0]; /** int[] dp = new int[n]; dp[0] = nums[0]; dp[1] = Math.max(nums[0], nums[1]); for (int i = 2; i &amp;lt; n; i++) { dp[i] = Math.</description>
    </item>
    
    <item>
      <title>minDays 1482</title>
      <link>https://minezeratul.github.io/p/seventh-blog/</link>
      <pubDate>Sat, 15 May 2021 20:47:24 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/seventh-blog/</guid>
      <description>Leetcode 1482 这是5.9号的题目 1482. 制作 m 束花所需的最少天数
二分的应用场景不一定有序，只要具备排他性、两段性，就可以二分
寻找最优临界值的题目，往往可以借助二分搜索
/** * @param bloomDay 什么时候开花 * @param m m束 * @param k k朵花做成一束 * @return */ public static int minDays(int[] bloomDay, int m, int k) { int n = bloomDay.length; if (n &amp;lt; m * k)//不够花束  return -1; int low = Integer.MAX_VALUE, high = 0; for (int i = 0; i &amp;lt; n; i++) { low = Math.min(low, bloomDay[i]);//找到最小值作为low  high = Math.</description>
    </item>
    
    <item>
      <title>intToRoman and RomanToInt</title>
      <link>https://minezeratul.github.io/p/6th-blog/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/6th-blog/</guid>
      <description>Leetcode 12 and Leetcode 13 5.14和5.15的每日一题 ，貌似没有什么可写的，可能就需要用StringBuilder来构建string
12. 整数转罗马数字 class Solution { public String intToRoman(int num) { StringBuilder sb = new StringBuilder(); int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}; for (int i = 0; i &amp;lt; values.length; i++) { int val = values[i]; while (num &amp;gt;= val){ num -= val; sb.append(getStr(val)); if (num == 0) break; } } return sb.toString(); } private String getStr(int num){ switch (num){ case 1000: return &amp;#34;M&amp;#34;; case 900: return &amp;#34;CM&amp;#34;; case 500: return &amp;#34;D&amp;#34;; case 400: return &amp;#34;CD&amp;#34;; case 100: return &amp;#34;C&amp;#34;; case 90: return &amp;#34;XC&amp;#34;; case 50: return &amp;#34;L&amp;#34;; case 40: return &amp;#34;XL&amp;#34;; case 10: return &amp;#34;X&amp;#34;; case 9: return &amp;#34;IX&amp;#34;; case 5: return &amp;#34;V&amp;#34;; case 4: return &amp;#34;IV&amp;#34;; case 1: return &amp;#34;I&amp;#34;; } return null; } } 13.</description>
    </item>
    
    <item>
      <title>NumArray307</title>
      <link>https://minezeratul.github.io/p/5th-blog/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/5th-blog/</guid>
      <description>Leetcode 307 这是今天做的一个题 307. 区域和检索 - 数组可修改
和 303. 区域和检索 - 数组不可变 不同的是 数组可修改
上一个dalao的分析 , 放弃996了
/** * 数组不变，求区间和：「前缀和」、「树状数组」、「线段树」 * * 多次修改某个数，求区间和：「树状数组」、「线段树」 * * 多次整体修改某个区间，求区间和：「线段树」、「树状数组」（看修改区间的数据范围） * * 多次将某个区间变成同一个数，求区间和：「线段树」、「树状数组」（看修改区间的数据范围） * */ 学了个树状数组方法。
class NumArray { int[] tree; int lowBits(int x){ return x &amp;amp; -x;//保留二进制下最后出现的1的位置，其余位置置0  } //当一个偶数与它的负值向与时，结果是能被这个偶数整除的最大的2的n次幂 , 比如10返回2  //当一个奇数与它的负值向与时结果一定是1  // 查询前缀和的方法  int query(int x){ int ans = 0; for (int i = x; i &amp;gt; 0 ; i -= lowBits(i)) { ans += tree[i]; } return ans; } // 在树状数组 x 位置中增加值 u  void add(int x ,int u){ for (int i = x; i &amp;lt;= n ; i += lowBits(i)) { tree[i] += u; } } int[] nums; int n; // 初始化「树状数组」  public NumArray(int[] nums) { this.</description>
    </item>
    
    <item>
      <title>xorQueries</title>
      <link>https://minezeratul.github.io/p/4th-blog/</link>
      <pubDate>Wed, 12 May 2021 18:40:29 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/4th-blog/</guid>
      <description>Leetcode 1310 今天又是爆肝的一天 , 感觉这个月应该 是异或月了，全是异或题（痛哭）
今天的每日一题是1310. 子数组异或查询
queries数组提供的是查询的范围
然后返回一个包含所有查询结果的数组
我们可以用类似 prefix sum 前缀和
采取 prefix XOR前缀异或 来完成该题
对于每个查询都要计算，因此我们应该优化每个查询的计算时间
queries(L , R)
= array[L] ⊕ &amp;hellip;. ⊕ array[R] , 又 x ⊕ x = 0
= ( array[0] ⊕ &amp;hellip;. ⊕ array[L - 1] ) ⊕ ( array[0] ⊕ &amp;hellip;. ⊕ array[L - 1] ) ⊕ ( array[L] ⊕ &amp;hellip;. ⊕ array[R] )
= ( array[0] ⊕ &amp;hellip;. ⊕ array[L - 1] ) ⊕ ( array[0] ⊕ &amp;hellip;.</description>
    </item>
    
    <item>
      <title>leaf Similar</title>
      <link>https://minezeratul.github.io/p/third-blog/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/third-blog/</guid>
      <description>Leetcode 872 Hello , 我是mz
这是今天的每日一题872. 叶子相似的树
题目要求获取这些叶子的值并按从左到右的顺序排列形成一个 叶值序列
叶 ， 即无左右节点 , 并且还有按顺序，我们可以选择用中序遍历来完成要求
public boolean leafSimilar(TreeNode root1, TreeNode root2) { List&amp;lt;Integer&amp;gt; list1 = new ArrayList&amp;lt;&amp;gt;(); List&amp;lt;Integer&amp;gt; list2 = new ArrayList&amp;lt;&amp;gt;(); inorder(root1, list1); inorder(root2, list2); return list1.equals(list2); } private void inorder(TreeNode root, List&amp;lt;Integer&amp;gt; list) { if (root != null) { inorder(root.left, list); if (root.left == null &amp;amp;&amp;amp; root.right == null) list.add(root.val); inorder(root.right, list); } } 空间复杂度为O（n + m) ，n , m 分别为两个ArrayList</description>
    </item>
    
    <item>
      <title>Least Bricks</title>
      <link>https://minezeratul.github.io/p/second-blog/</link>
      <pubDate>Sat, 08 May 2021 00:00:00 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/second-blog/</guid>
      <description>Leetcode 554 大家好，我是mz
这是2021.5.2的每日一题554. 砖墙
题目要求一条自顶向下 的、穿过 最少 砖块的垂线 ， 也可以理解为 总行数- 间隙最多
这样就可以得出穿过最少砖块的路线
我选择用了 [哈希表] 去记录了每个间隙所生成的位置 , 然后用Math.max去寻找最大间隙.
public int leastBricks(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; wall) { Map&amp;lt;Integer , Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); for (List&amp;lt;Integer&amp;gt; widths:wall){ int n = widths.size(); int sum = 0; for (int i = 0; i &amp;lt; n - 1; i++) { sum += widths.get(i); map.put(sum , map.getOrDefault(sum , 0) + 1);//记录间隙位置  } } int cnt = 0; for (Map.</description>
    </item>
    
    <item>
      <title>My First Blog here</title>
      <link>https://minezeratul.github.io/p/first-blog/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/first-blog/</guid>
      <description>Hello , This is my first blog here I&amp;rsquo;m Minezeratul 今天的每日一题为 1486. 数组异或操作
异或操作 , 即为XOR ， 同为0 ，异为1 ，1^0 = 1 0^0 = 0
public static int xorOperation(int n, int start) { if (n == 1) { return start; } int res = 0 ; for (int i = 0; i &amp;lt; n; i++) { res ^= start + 2 * i; } return res; } 时间复杂度为O(n)</description>
    </item>
    
  </channel>
</rss>
