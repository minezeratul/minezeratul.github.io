[{"content":"Leetcode 421 FineMaxXOR 5.16的题目 421. 数组中两个数的最大异或值\n用到了 208. 实现 Trie (前缀树) public class Trie { private Trie[] children; private boolean isEnd; public Trie() { children = new Trie[26];//字母表映射  isEnd = false; } //插入字符串 \t//我们从字典树的根开始,插入字符串。对于当前字符对应的子节点,有两种情况 \t//子节点存在。沿着指针移动到子节点,继续处理下一个字符。 \t//子节点不存在。创建一个新的子节点,记录在children数组的对应位置上,  //然后沿着指针移动到子节点,继续搜索下一个字符。  public void insert(String word) { Trie node = this;//root  for (int i = 0; i \u0026lt; word.length(); i++) { char ch = word.charAt(i); int index = ch - \u0026#39;a\u0026#39;; if (node.children[index] == null) node.children[index] = new Trie(); node = node.children[index]; } node.isEnd = true; } public boolean search(String word) { Trie node = searchPrefix(word); return node != null \u0026amp;\u0026amp; node.isEnd; } public boolean startsWith(String prefix) { return searchPrefix(prefix) != null; } //查找前缀 \t//我们从字典树的根开始,查找前缀。对于当前字符对应的子节点,有两种情况 \t//子节点存在:沿着指针移动到子节点,继续搜索下一个字符,直到isEnd = true \t//子节点不存在:说明字典树中不包含该前缀,返回null。  private Trie searchPrefix(String prefix) { Trie node = this; for (int i = 0; i \u0026lt; prefix.length(); i++) { char ch = prefix.charAt(i); int index = ch - \u0026#39;a\u0026#39;; if (node.children[index] == null) return null; node = node.children[index]; } return node; } } ![Trie tree](Trie Tree.png)\n421则是用了trie的方法来做\nclass Solution { // 字典树的根节点  Trie root = new Trie(); // 最高位的二进制位编号为 30  static final int HIGH_BIT = 30; public int findMaximumXOR(int[] nums) { int n = nums.length; int x = 0; for (int i = 1; i \u0026lt; n; ++i) { // 将 nums[i-1] 放入字典树，此时 nums[0 .. i-1] 都在字典树中  add(nums[i - 1]); // 将 nums[i] 看作 a_i，找出最大的 x 更新答案  x = Math.max(x, check(nums[i])); } return x; } public void add(int num) { Trie cur = root; for (int k = HIGH_BIT; k \u0026gt;= 0; --k) { int bit = (num \u0026gt;\u0026gt; k) \u0026amp; 1; if (bit == 0) { if (cur.left == null) { cur.left = new Trie(); } cur = cur.left; } else { if (cur.right == null) { cur.right = new Trie(); } cur = cur.right; } } } //尽可能找异位 , 0 ⊕ 1 = 1 , 使得  public int check(int num) { Trie cur = root; int x = 0; for (int k = HIGH_BIT; k \u0026gt;= 0; --k) { int bit = (num \u0026gt;\u0026gt; k) \u0026amp; 1; if (bit == 0) { // a_i 的第 k 个二进制位为 0，应当往表示 1 的子节点 right 走  if (cur.right != null) { cur = cur.right; x = x * 2 + 1; } else { cur = cur.left; x = x * 2; } } else { // a_i 的第 k 个二进制位为 1，应当往表示 0 的子节点 left 走  if (cur.left != null) { cur = cur.left; x = x * 2 + 1; } else { cur = cur.right; x = x * 2; } } } return x; } } } class Trie { Trie left = null;//0  Trie right = null;//1 } ","date":"2021-05-16T23:21:51+08:00","image":"https://minezeratul.github.io/p/ninth-blog/wallhaven-z8p1jy_hu38044c2a6d833b8cc715b17eaec2c4bb_307896_120x120_fill_q75_box_smart1.jpg","permalink":"https://minezeratul.github.io/p/ninth-blog/","title":"Trie \u0026 XOR"},{"content":"Leetcode 740 5.5的题目740. 删除并获得点数 和 198. 打家劫舍 有点类似 , 需要在一些地方做出调整\n为了做740，先去当了一遍小偷XDDD\n打家劫舍，经典dp问题，偷还得隔间偷,甚至开了透视知道哪里最多钱（笑\n一间的时候肯定只能偷那个，两间的时候就需要Math.max比较\nn间的时候则需要 when i \u0026gt; 2 , Math.max(dp[i - 2] + num[i] , dp[i - 1])来比较金额大小\npublic int rob(int[] nums) { int n = nums.length; if (n == 0 || nums == null) return 0; else if (n == 1) return nums[0]; /** int[] dp = new int[n]; dp[0] = nums[0]; dp[1] = Math.max(nums[0], nums[1]); for (int i = 2; i \u0026lt; n; i++) { dp[i] = Math.max(dp[i - 2] + nums[i] , dp[i -1]); } return dp[n - 1]; */ //最大金额只与前两间房子的最大值相关  //用滚动数组优化  int first = nums[0], second = Math.max(nums[0], nums[1]); for (int i = 2; i \u0026lt; n; i++) { int temp = second; second = Math.max(first + nums[i], second); first = temp; } return second; } 时间复杂度：O(n) ， 需要对整个num数组遍历一次\n空间复杂度：O(1)，不需要存储每次计算结果\n 740的话，需要先找出最大值max , 因为需要用一个all数组来记录相同元素之和 , 防止out of bound\n/** * 根据题意,在选择了元素x后,该元素以及所有等于x-1或x+1的元素会从数组中删去。 * 若还有多个值为x的元素,由于所有等于x-1或x+1的元素已经被删除,我们可以直接删除并获得其点数。 * 因此若选择了x,所有等于x的元素也应同被选择,以尽可能多地获得点数。 */ public int deleteAndEarn(int[] nums){ int n = nums.length; if (n == 0 || nums == null) return 0; else if (n == 1) return nums[0]; int max = 0; for (int maxVal:nums) { max = Math.max(maxVal , max);//防止out of bounds  } int[] all = new int[max + 1]; for (int val : nums) all[val] += val; return rob(all); } private int rob(int[] nums){ int n = nums.length; int first = nums[0] , second = Math.max(nums[0] , nums[1]); for (int i = 2; i \u0026lt; n; i++) { int temp = second; second = Math.max(first + nums[i], second); first = temp; } return second; } 时间复杂度O(N+M) , 其中N是数组nums的长度, M是num中元素的最大值。\n空间复杂度:O(M)\n","date":"2021-05-16T00:47:24+08:00","image":"https://minezeratul.github.io/p/eighth-blog/wallhaven-3zqdjv_hua3d208be2a18f6c69f0bc48a70d7f9db_2862984_120x120_fill_q75_box_smart1.jpg","permalink":"https://minezeratul.github.io/p/eighth-blog/","title":"Rob me if u can"},{"content":"Leetcode 1482 这是5.9号的题目 1482. 制作 m 束花所需的最少天数\n二分的应用场景不一定有序，只要具备排他性、两段性，就可以二分\n寻找最优临界值的题目，往往可以借助二分搜索\n/** * @param bloomDay 什么时候开花 * @param m m束 * @param k k朵花做成一束 * @return */ public static int minDays(int[] bloomDay, int m, int k) { int n = bloomDay.length; if (n \u0026lt; m * k)//不够花束  return -1; int low = Integer.MAX_VALUE, high = 0; for (int i = 0; i \u0026lt; n; i++) { low = Math.min(low, bloomDay[i]);//找到最小值作为low  high = Math.max(high, bloomDay[i]);//找到最大值作为high  } while (low \u0026lt; high) {//不断靠近目标值,当low = high时，此时即为最少天数  int days = (high - low) / 2 + low; if (canMake(bloomDay, days, m, k)) { high = days; } else { low = days + 1; } } return low; } //辅助函数，找到临界点  public static boolean canMake(int[] bloomDay, int days, int m, int k) { //在确保可以制作出指定数量的花束的情况下，所需的最少天数一定会大于min，小于max  //days很小的时候，总是返回false，不够做够花束，而days很大的时候，则总是返回true  int bouquets = 0; int flowers = 0; int length = bloomDay.length; for (int i = 0; i \u0026lt; length \u0026amp;\u0026amp; bouquets \u0026lt; m; i++) { if (bloomDay[i] \u0026lt;= days) { flowers++; if (flowers == k) { bouquets++; flowers = 0; } } else { flowers = 0; } } return bouquets \u0026gt;= m; }\t","date":"2021-05-15T20:47:24+08:00","image":"https://minezeratul.github.io/p/seventh-blog/wallhaven-v9qy9l_huf424ae543613049e9d1957ffc0ce99c4_1243068_120x120_fill_q75_box_smart1.jpg","permalink":"https://minezeratul.github.io/p/seventh-blog/","title":"minDays 1482"},{"content":"Leetcode 12 and Leetcode 13 5.14和5.15的每日一题 ，貌似没有什么可写的，可能就需要用StringBuilder来构建string\n12. 整数转罗马数字 class Solution { public String intToRoman(int num) { StringBuilder sb = new StringBuilder(); int[] values = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}; for (int i = 0; i \u0026lt; values.length; i++) { int val = values[i]; while (num \u0026gt;= val){ num -= val; sb.append(getStr(val)); if (num == 0) break; } } return sb.toString(); } private String getStr(int num){ switch (num){ case 1000: return \u0026#34;M\u0026#34;; case 900: return \u0026#34;CM\u0026#34;; case 500: return \u0026#34;D\u0026#34;; case 400: return \u0026#34;CD\u0026#34;; case 100: return \u0026#34;C\u0026#34;; case 90: return \u0026#34;XC\u0026#34;; case 50: return \u0026#34;L\u0026#34;; case 40: return \u0026#34;XL\u0026#34;; case 10: return \u0026#34;X\u0026#34;; case 9: return \u0026#34;IX\u0026#34;; case 5: return \u0026#34;V\u0026#34;; case 4: return \u0026#34;IV\u0026#34;; case 1: return \u0026#34;I\u0026#34;; } return null; } } 13. 罗马数字转整数 public int romanToInt(String s) { int count = 0; int size = s.length(); for (int i = 0; i \u0026lt; size; i++) { if (i + 1 == size) count += getVal(s.charAt(i)); else { if (getVal(s.charAt(i + 1)) \u0026lt;= getVal(s.charAt(i))) count += getVal(s.charAt(i)); else { count += getVal(s.charAt(i + 1)) - getVal(s.charAt(i)); i++; } } } return count; } public int getVal(char ch) { switch (ch) { case \u0026#39;I\u0026#39;: return 1; case \u0026#39;V\u0026#39;: return 5; case \u0026#39;X\u0026#39;: return 10; case \u0026#39;L\u0026#39;: return 50; case \u0026#39;C\u0026#39;: return 100; case \u0026#39;D\u0026#39;: return 500; case \u0026#39;M\u0026#39;: return 1000; default: return 0; } } ","date":"2021-05-15T00:00:00+08:00","image":"https://minezeratul.github.io/p/6th-blog/wallhaven-rdqvpq_hu4a0c1228b7c9baee4eb7cca01158b3ad_537850_120x120_fill_q75_box_smart1.jpg","permalink":"https://minezeratul.github.io/p/6th-blog/","title":"intToRoman and RomanToInt"},{"content":"Leetcode 307 这是今天做的一个题 307. 区域和检索 - 数组可修改\n和 303. 区域和检索 - 数组不可变 不同的是 数组可修改\n上一个dalao的分析 , 放弃996了\n/** * 数组不变，求区间和：「前缀和」、「树状数组」、「线段树」 * * 多次修改某个数，求区间和：「树状数组」、「线段树」 * * 多次整体修改某个区间，求区间和：「线段树」、「树状数组」（看修改区间的数据范围） * * 多次将某个区间变成同一个数，求区间和：「线段树」、「树状数组」（看修改区间的数据范围） * */ 学了个树状数组方法。\nclass NumArray { int[] tree; int lowBits(int x){ return x \u0026amp; -x;//保留二进制下最后出现的1的位置，其余位置置0  } //当一个偶数与它的负值向与时，结果是能被这个偶数整除的最大的2的n次幂 , 比如10返回2  //当一个奇数与它的负值向与时结果一定是1  // 查询前缀和的方法  int query(int x){ int ans = 0; for (int i = x; i \u0026gt; 0 ; i -= lowBits(i)) { ans += tree[i]; } return ans; } // 在树状数组 x 位置中增加值 u  void add(int x ,int u){ for (int i = x; i \u0026lt;= n ; i += lowBits(i)) { tree[i] += u; } } int[] nums; int n; // 初始化「树状数组」  public NumArray(int[] nums) { this.nums = nums; n = nums.length; tree = new int[n + 1]; for (int i = 0; i \u0026lt; n; i++) { add(i + 1, nums[i]); } } // 原有的值是 nums[i]，要使得修改为 val，需要增加 val - nums[i]  public void update(int index, int val) { add(index + 1 , val - nums[index]); nums[index] = val; } public int sumRange(int left, int right) { return query(right + 1) - query(left); } } ","date":"2021-05-13T00:00:00+08:00","image":"https://minezeratul.github.io/p/5th-blog/wallhaven-nkd6x6_hu91ef828cf299bfb62d37d6673a920b75_286363_120x120_fill_q75_box_smart1.jpg","permalink":"https://minezeratul.github.io/p/5th-blog/","title":"NumArray307"},{"content":"Leetcode 1310 今天又是爆肝的一天 , 感觉这个月应该 是异或月了，全是异或题（痛哭）\n今天的每日一题是1310. 子数组异或查询\nqueries数组提供的是查询的范围\n然后返回一个包含所有查询结果的数组\n我们可以用类似 prefix sum 前缀和\n采取 prefix XOR前缀异或 来完成该题\n对于每个查询都要计算，因此我们应该优化每个查询的计算时间\nqueries(L , R)\n= array[L] ⊕ \u0026hellip;. ⊕ array[R] , 又 x ⊕ x = 0\n= ( array[0] ⊕ \u0026hellip;. ⊕ array[L - 1] ) ⊕ ( array[0] ⊕ \u0026hellip;. ⊕ array[L - 1] ) ⊕ ( array[L] ⊕ \u0026hellip;. ⊕ array[R] )\n= ( array[0] ⊕ \u0026hellip;. ⊕ array[L - 1] ) ⊕ ( array[0] ⊕ \u0026hellip;. ⊕ array[R] )\n= XORS[L] ⊕ XORS[R + 1]\nXORS为存储 前缀异或 的数组 , 当L = 0时，XORS[0] = 0 ，以上等式仍然成立\n数组不变，求区间 , 都可以用prefix来解决\n public static int[] xorQueries(int[] arr, int[][] queries) { int n = arr.length; int[] pre = new int[n + 1]; //计算每个位置的前缀和 pre[i] 表示前i项的异或和  for (int i = 1; i \u0026lt;= n; i++) { pre[i] = pre[i - 1] ^ arr[i - 1]; } int[] ans = new int[queries.length]; int i = 0; /** * for (int i = 0; i \u0026lt; m; i++) { * ans[i] = xors[queries[i][0]] ^ xors[queries[i][1] + 1]; * } */ for (int[] query : queries) { //前面多异或的部分，再重复异或一次就可以抵消了  //假设 求 [1, 2]，那么对于 [0, 2] 来说就是多异或了 [0, 0] 这个结果  //根据 两个相同值异或结果为 0，那么我们可以再异或一次 [0, 0] 就将 [0, 0] 给抵消掉了  //pre[query[0]]代表了[0, 0]异或 pre[query[1] + 1]代表了[0, 2]异或 其中[0, 0]异或两次  //最后相当于[1, 2]异或  ans[i++] = pre[query[0]] ^ pre[query[1] + 1]; } return ans; } 时间复杂度：O(n+m) , n , m 分别为array , queries数组的长度\n空间复杂度：O(n)\n类似题目有307. 区域和检索 - 数组可修改\n","date":"2021-05-12T18:40:29+08:00","image":"https://minezeratul.github.io/p/4th-blog/wallhaven-281d5y_hue3cb4f8324f5bc5c464a88daae21375e_3477426_120x120_fill_box_smart1_2.png","permalink":"https://minezeratul.github.io/p/4th-blog/","title":"xorQueries"},{"content":"Leetcode 872 Hello , 我是mz\n这是今天的每日一题872. 叶子相似的树\n题目要求获取这些叶子的值并按从左到右的顺序排列形成一个 叶值序列\n叶 ， 即无左右节点 , 并且还有按顺序，我们可以选择用中序遍历来完成要求\npublic boolean leafSimilar(TreeNode root1, TreeNode root2) { List\u0026lt;Integer\u0026gt; list1 = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; list2 = new ArrayList\u0026lt;\u0026gt;(); inorder(root1, list1); inorder(root2, list2); return list1.equals(list2); } private void inorder(TreeNode root, List\u0026lt;Integer\u0026gt; list) { if (root != null) { inorder(root.left, list); if (root.left == null \u0026amp;\u0026amp; root.right == null) list.add(root.val); inorder(root.right, list); } } 空间复杂度为O（n + m) ，n , m 分别为两个ArrayList\n需要遍历整个list ，因此时间复杂度为O（n + m)\n","date":"2021-05-08T00:00:00+08:00","image":"https://minezeratul.github.io/p/third-blog/wallhaven-5we787_hu30910665284931ace4f57faa1e01d828_921583_120x120_fill_q75_box_smart1.jpg","permalink":"https://minezeratul.github.io/p/third-blog/","title":"leaf Similar"},{"content":"Leetcode 554 大家好，我是mz\n这是2021.5.2的每日一题554. 砖墙\n题目要求一条自顶向下 的、穿过 最少 砖块的垂线 ， 也可以理解为 总行数- 间隙最多\n这样就可以得出穿过最少砖块的路线\n我选择用了 [哈希表] 去记录了每个间隙所生成的位置 , 然后用Math.max去寻找最大间隙.\npublic int leastBricks(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; wall) { Map\u0026lt;Integer , Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); for (List\u0026lt;Integer\u0026gt; widths:wall){ int n = widths.size(); int sum = 0; for (int i = 0; i \u0026lt; n - 1; i++) { sum += widths.get(i); map.put(sum , map.getOrDefault(sum , 0) + 1);//记录间隙位置  } } int cnt = 0; for (Map.Entry\u0026lt;Integer , Integer\u0026gt; entry : map.entrySet()){\tcnt = Math.max(cnt , entry.getValue());//对比间隙  } return wall.size() - cnt; } 时间复杂度：O(nm) nn 是砖墙的高度，mm 是每行砖墙的砖的平均数量\n空间复杂度：O(nm)\n","date":"2021-05-08T00:00:00+08:00","image":"https://minezeratul.github.io/p/second-blog/wallhaven-pk8pzj_hu3d2822634ca48e852ce9c18a25e720d4_8322172_120x120_fill_box_smart1_2.png","permalink":"https://minezeratul.github.io/p/second-blog/","title":"Least Bricks"},{"content":"Hello , This is my first blog here I\u0026rsquo;m Minezeratul 今天的每日一题为 1486. 数组异或操作\n异或操作 , 即为XOR ， 同为0 ，异为1 ，1^0 = 1 0^0 = 0\nif (n == 1)//当为1的时候不运算  return start; int res = 0 ; for (int i = 0; i \u0026lt; n; i++) { res ^= start + 2 * i;//直接循环运算 } return res; 时间复杂度为O(n)\n","date":"2021-05-07T00:00:00+08:00","image":"https://minezeratul.github.io/p/first-blog/wallhaven-x8ev3l_hu5438825b9b6d1014226d20d231e650c2_680482_120x120_fill_q75_box_smart1.jpg","permalink":"https://minezeratul.github.io/p/first-blog/","title":"My First Blog here"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用  思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n 图片 \rPhoto by Florian Klauer on Unsplash\r \rPhoto by Luca Bravo on Unsplash\r\n\rPhoto by Helena Hertz on Unsplash\r \rPhoto by Hudai Gayiran on Unsplash\r\n![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://minezeratul.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://minezeratul.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://minezeratul.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://minezeratul.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }","date":"2019-03-05T00:00:00Z","image":"https://minezeratul.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://minezeratul.github.io/p/emoji-support/","title":"Emoji Support"}]