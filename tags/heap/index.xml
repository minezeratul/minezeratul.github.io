<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>heap on Minezeratul</title>
    <link>https://minezeratul.github.io/tags/heap/</link>
    <description>Recent content in heap on Minezeratul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 May 2021 19:27:24 +0800</lastBuildDate><atom:link href="https://minezeratul.github.io/tags/heap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Largest Val in my mind xD</title>
      <link>https://minezeratul.github.io/p/12nd-blog/</link>
      <pubDate>Sat, 22 May 2021 19:27:24 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/12nd-blog/</guid>
      <description>Leetcode K-Largest Val 215. 数组中的第K个最大元素 , 题目需要 在未排序的数组找到第 k 个最大的元素 ，而且不是第k个不同的元素
先看简单方法，用Java的PriorityQueue来解答，需注意的是PriorityQueue是用小顶堆实现的
public int findKthLargest2(int[] nums, int k) { PriorityQueue&amp;lt;Integer&amp;gt; pq = new PriorityQueue&amp;lt;&amp;gt;(); //小顶堆去除元素  for (int num : nums) { pq.offer(num); if (pq.size() &amp;gt; k) { //因为我们只需要找到第K大的数,超过size直接去除堆顶元素就好  pq.poll(); } } return pq.peek(); } 亦或者和官方解答一样，用大顶堆实现也可以得出第K大的数
public int findKthLargest(int[] nums, int k) { int heapSize = nums.length; buildMaxHeap(nums, heapSize); for (int i = nums.length - 1; i &amp;gt;= nums.length - k + 1; --i) { swap(nums, 0, i); --heapSize; maxHeapify(nums, 0, heapSize); } return nums[0]; } public void buildMaxHeap(int[] a, int heapSize) { for (int i = heapSize / 2; i &amp;gt;= 0; i--) { maxHeapify(a, i, heapSize); } } public void maxHeapify(int[] a, int i, int heapSize) { int l = i * 2 + 1, r = i * 2 + 2, largest = i; if (l &amp;lt; heapSize &amp;amp;&amp;amp; a[l] &amp;gt; a[largest]) { largest = l; } if (r &amp;lt; heapSize &amp;amp;&amp;amp; a[r] &amp;gt; a[largest]) { largest = r; } if (largest !</description>
    </item>
    
  </channel>
</rss>
