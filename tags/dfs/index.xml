<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dfs on Minezeratul</title>
    <link>https://minezeratul.github.io/tags/dfs/</link>
    <description>Recent content in dfs on Minezeratul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Jul 2021 20:44:50 +0800</lastBuildDate><atom:link href="https://minezeratul.github.io/tags/dfs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>并查集Union-Find应用</title>
      <link>https://minezeratul.github.io/p/solve130/</link>
      <pubDate>Wed, 21 Jul 2021 20:44:50 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/solve130/</guid>
      <description>Leetcode 130 很多使用 DFS 深度优先算法解决的问题，也可以用 Union-Find 算法解决 Leetcode130，题目要求找出被X包围的O ，其中不包括边界上的O 第一种方法，用dfs 做法和官解一样
public void dfs(char[][] board){ int n = board.length; if (n == 0){ return; } //n为行数,m为列数  int m = board[0].length; //找出左右边界上的O，改为A  for (int i = 0; i &amp;lt; n; i++) { dfs(board , i , 0); dfs(board , i , m - 1); } //找出上下边界的O改为A  for (int i = 1; i &amp;lt; m - 1; i++) { dfs(board , 0 , i); dfs(board , n - 1 , i); } //遍历  for (int i = 0; i &amp;lt; n; i++) { for (int j = 0; j &amp;lt; m; j++) { if (board[i][j] == &amp;#39;A&amp;#39;){ board[i][j] = &amp;#39;O&amp;#39;; }else if (board[i][j] == &amp;#39;O&amp;#39;){ board[i][j] = &amp;#39;X&amp;#39;; }else { continue; } } } } //若找到边界上的O，开始上下左右搜索  //将邻接的O也变成A  public static void dfs(char[][] board , int x , int y){ //越界处理，以及寻O  if (x &amp;lt; 0 || y &amp;lt; 0 || x &amp;gt;= board.</description>
    </item>
    
    <item>
      <title>Passing message</title>
      <link>https://minezeratul.github.io/p/leetcode-lcp07/</link>
      <pubDate>Mon, 05 Jul 2021 16:15:12 +0800</pubDate>
      
      <guid>https://minezeratul.github.io/p/leetcode-lcp07/</guid>
      <description>Leetcode LCP-07 LCP 07. 传递信息 看用例就可以知道这是一个图，[u , v]
用dfs深度优先来一步一步搜寻到末端
public int numWays(int n, int[][] relations, int k) { int cnt = 0; boolean[][] isVisited = new boolean[n][n];//判断是否经过  for (int[] relation : relations) { isVisited[relation[0]][relation[1]] = true; } return dfs(0 , isVisited , k); } public int dfs(int n , boolean[][] isVisited , int k){ if (k == 0){ return isVisited.length - 1 == n ? 1 : 0; } int cnt = 0 ; for (int i = 0; i &amp;lt; isVisited[n].</description>
    </item>
    
  </channel>
</rss>
